/* Automatically generated nanopb constant definitions */
/* Generated by nanopb-0.3.9 at Fri May 18 00:37:32 2018. */

#include "proto_ethereum.pb.h"

/* @@protoc_insertion_point(includes) */
#if PB_PROTO_HEADER_VERSION != 30
#error Regenerate this file with the current version of nanopb generator.
#endif



const pb_field_t ethereum_transaction_begin_req_parameter_t_fields[11] = {
    PB_FIELD(  1, BYTES   , REQUIRED, STATIC  , FIRST, ethereum_transaction_begin_req_parameter_t, nonce, nonce, 0),
    PB_FIELD(  2, BYTES   , REQUIRED, STATIC  , OTHER, ethereum_transaction_begin_req_parameter_t, gas_price, nonce, 0),
    PB_FIELD(  3, BYTES   , REQUIRED, STATIC  , OTHER, ethereum_transaction_begin_req_parameter_t, gas_limit, gas_price, 0),
    PB_FIELD(  4, STRING  , OPTIONAL, STATIC  , OTHER, ethereum_transaction_begin_req_parameter_t, to_address_str, gas_limit, 0),
    PB_FIELD(  5, BYTES   , REQUIRED, STATIC  , OTHER, ethereum_transaction_begin_req_parameter_t, to_address, to_address_str, 0),
    PB_FIELD(  6, BYTES   , REQUIRED, STATIC  , OTHER, ethereum_transaction_begin_req_parameter_t, value, to_address, 0),
    PB_FIELD(  7, UINT32  , REQUIRED, STATIC  , OTHER, ethereum_transaction_begin_req_parameter_t, total_data_len, value, 0),
    PB_FIELD(  8, BYTES   , REQUIRED, STATIC  , OTHER, ethereum_transaction_begin_req_parameter_t, init_data_blk, total_data_len, 0),
    PB_FIELD(  9, UINT32  , REQUIRED, STATIC  , OTHER, ethereum_transaction_begin_req_parameter_t, chain_id, init_data_blk, 0),
    PB_FIELD( 10, STRING  , REQUIRED, STATIC  , OTHER, ethereum_transaction_begin_req_parameter_t, key_path, chain_id, 0),
    PB_LAST_FIELD
};

const pb_field_t ethereum_transaction_update_data_req_parameter_t_fields[3] = {
    PB_FIELD(  2, UINT32  , REQUIRED, STATIC  , FIRST, ethereum_transaction_update_data_req_parameter_t, data_blk_idx, data_blk_idx, 0),
    PB_FIELD(  3, BYTES   , REQUIRED, STATIC  , OTHER, ethereum_transaction_update_data_req_parameter_t, data_blk, data_blk_idx, 0),
    PB_LAST_FIELD
};

const pb_field_t ethereum_transaction_finish_res_parameter_t_fields[4] = {
    PB_FIELD(  1, BYTES   , REQUIRED, STATIC  , FIRST, ethereum_transaction_finish_res_parameter_t, sign_v, sign_v, 0),
    PB_FIELD(  2, BYTES   , REQUIRED, STATIC  , OTHER, ethereum_transaction_finish_res_parameter_t, sign_r, sign_v, 0),
    PB_FIELD(  3, BYTES   , REQUIRED, STATIC  , OTHER, ethereum_transaction_finish_res_parameter_t, sign_s, sign_r, 0),
    PB_LAST_FIELD
};

const pb_field_t ethereum_get_address_req_parameter_t_fields[2] = {
    PB_FIELD(  2, STRING  , REQUIRED, STATIC  , FIRST, ethereum_get_address_req_parameter_t, key_path, key_path, 0),
    PB_LAST_FIELD
};

const pb_field_t ethereum_get_address_res_parameter_t_fields[2] = {
    PB_FIELD(  1, STRING  , REQUIRED, STATIC  , FIRST, ethereum_get_address_res_parameter_t, address, address, 0),
    PB_LAST_FIELD
};


/* Check that field information fits in pb_field_t */
#if !defined(PB_FIELD_32BIT)
/* If you get an error here, it means that you need to define PB_FIELD_32BIT
 * compile-time option. You can do that in pb.h or on compiler command line.
 * 
 * The reason you need to do this is that some of your messages contain tag
 * numbers or field sizes that are larger than what can fit in 8 or 16 bit
 * field descriptors.
 */
PB_STATIC_ASSERT((pb_membersize(ethereum_transaction_begin_req_parameter_t, init_data_blk) < 65536 && pb_membersize(ethereum_transaction_update_data_req_parameter_t, data_blk) < 65536), YOU_MUST_DEFINE_PB_FIELD_32BIT_FOR_MESSAGES_ethereum_transaction_begin_req_parameter_t_ethereum_transaction_update_data_req_parameter_t_ethereum_transaction_finish_res_parameter_t_ethereum_get_address_req_parameter_t_ethereum_get_address_res_parameter_t)
#endif

#if !defined(PB_FIELD_16BIT) && !defined(PB_FIELD_32BIT)
#error Field descriptor for ethereum_transaction_update_data_req_parameter_t.data_blk is too large. Define PB_FIELD_16BIT to fix this.
#endif


/* @@protoc_insertion_point(eof) */
