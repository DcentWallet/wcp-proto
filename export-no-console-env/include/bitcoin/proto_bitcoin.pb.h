/* Automatically generated nanopb header */
/* Generated by nanopb-0.3.9 at Fri Mar  9 21:33:23 2018. */

#ifndef PB_BITCOIN_PROTO_BITCOIN_PB_H_INCLUDED
#define PB_BITCOIN_PROTO_BITCOIN_PB_H_INCLUDED
#include <pb.h>

/* @@protoc_insertion_point(includes) */
#if PB_PROTO_HEADER_VERSION != 30
#error Regenerate this file with the current version of nanopb generator.
#endif

#ifdef __cplusplus
extern "C" {
#endif

/* Enum definitions */
typedef enum _bitcoin_transaction_type_t {
    bitcoin_transaction_type_t_p2pkh = 0,
    bitcoin_transaction_type_t_p2pk = 1,
    bitcoin_transaction_type_t_p2sh = 2,
    bitcoin_transaction_type_t_multisig = 3
} bitcoin_transaction_type_t;
#define _bitcoin_transaction_type_t_MIN bitcoin_transaction_type_t_p2pkh
#define _bitcoin_transaction_type_t_MAX bitcoin_transaction_type_t_multisig
#define _bitcoin_transaction_type_t_ARRAYSIZE ((bitcoin_transaction_type_t)(bitcoin_transaction_type_t_multisig+1))

/* Struct definitions */
typedef struct _bitcoin_transaction_begin_req_parameter_t {
    bitcoin_transaction_type_t tx_type;
    uint32_t input_num;
    uint32_t output_num;
/* @@protoc_insertion_point(struct:bitcoin_transaction_begin_req_parameter_t) */
} bitcoin_transaction_begin_req_parameter_t;

typedef struct _bitcoin_transaction_retrieve_res_parameter_t {
    uint32_t tx_blk_idx;
    char tx_blk[128];
/* @@protoc_insertion_point(struct:bitcoin_transaction_retrieve_res_parameter_t) */
} bitcoin_transaction_retrieve_res_parameter_t;

typedef struct _bitcoin_transaction_update_end_res_parameter_t {
    uint32_t tx_size;
    uint32_t tx_blk_num;
/* @@protoc_insertion_point(struct:bitcoin_transaction_update_end_res_parameter_t) */
} bitcoin_transaction_update_end_res_parameter_t;

typedef struct _bitcoin_transaction_update_input_req_parameter_t {
    uint32_t input_idx;
    uint32_t prev_tx_size;
    uint32_t prev_tx_blk_num;
    uint32_t utxo_idx;
    char key_path[33];
/* @@protoc_insertion_point(struct:bitcoin_transaction_update_input_req_parameter_t) */
} bitcoin_transaction_update_input_req_parameter_t;

typedef struct _bitcoin_transaction_update_output_req_parameter_t {
    uint32_t ouput_idx;
    bool has_to_address;
    char to_address[128];
    bool has_change_path;
    char change_path[33];
/* @@protoc_insertion_point(struct:bitcoin_transaction_update_output_req_parameter_t) */
} bitcoin_transaction_update_output_req_parameter_t;

typedef struct _bitcoin_transaction_update_prevtx_req_parameter_t {
    uint32_t input_idx;
    uint32_t prev_tx_blk_idx;
    char prev_tx_blk[128];
/* @@protoc_insertion_point(struct:bitcoin_transaction_update_prevtx_req_parameter_t) */
} bitcoin_transaction_update_prevtx_req_parameter_t;

/* Default values for struct fields */

/* Initializer values for message structs */
#define bitcoin_transaction_begin_req_parameter_t_init_default {(bitcoin_transaction_type_t)0, 0, 0}
#define bitcoin_transaction_update_input_req_parameter_t_init_default {0, 0, 0, 0, ""}
#define bitcoin_transaction_update_prevtx_req_parameter_t_init_default {0, 0, ""}
#define bitcoin_transaction_update_output_req_parameter_t_init_default {0, false, "", false, ""}
#define bitcoin_transaction_update_end_res_parameter_t_init_default {0, 0}
#define bitcoin_transaction_retrieve_res_parameter_t_init_default {0, ""}
#define bitcoin_transaction_begin_req_parameter_t_init_zero {(bitcoin_transaction_type_t)0, 0, 0}
#define bitcoin_transaction_update_input_req_parameter_t_init_zero {0, 0, 0, 0, ""}
#define bitcoin_transaction_update_prevtx_req_parameter_t_init_zero {0, 0, ""}
#define bitcoin_transaction_update_output_req_parameter_t_init_zero {0, false, "", false, ""}
#define bitcoin_transaction_update_end_res_parameter_t_init_zero {0, 0}
#define bitcoin_transaction_retrieve_res_parameter_t_init_zero {0, ""}

/* Field tags (for use in manual encoding/decoding) */
#define bitcoin_transaction_begin_req_parameter_t_tx_type_tag 1
#define bitcoin_transaction_begin_req_parameter_t_input_num_tag 2
#define bitcoin_transaction_begin_req_parameter_t_output_num_tag 3
#define bitcoin_transaction_retrieve_res_parameter_t_tx_blk_idx_tag 2
#define bitcoin_transaction_retrieve_res_parameter_t_tx_blk_tag 3
#define bitcoin_transaction_update_end_res_parameter_t_tx_size_tag 1
#define bitcoin_transaction_update_end_res_parameter_t_tx_blk_num_tag 2
#define bitcoin_transaction_update_input_req_parameter_t_input_idx_tag 1
#define bitcoin_transaction_update_input_req_parameter_t_prev_tx_size_tag 2
#define bitcoin_transaction_update_input_req_parameter_t_prev_tx_blk_num_tag 3
#define bitcoin_transaction_update_input_req_parameter_t_utxo_idx_tag 4
#define bitcoin_transaction_update_input_req_parameter_t_key_path_tag 5
#define bitcoin_transaction_update_output_req_parameter_t_ouput_idx_tag 1
#define bitcoin_transaction_update_output_req_parameter_t_to_address_tag 2
#define bitcoin_transaction_update_output_req_parameter_t_change_path_tag 3
#define bitcoin_transaction_update_prevtx_req_parameter_t_input_idx_tag 1
#define bitcoin_transaction_update_prevtx_req_parameter_t_prev_tx_blk_idx_tag 2
#define bitcoin_transaction_update_prevtx_req_parameter_t_prev_tx_blk_tag 3

/* Struct field encoding specification for nanopb */
extern const pb_field_t bitcoin_transaction_begin_req_parameter_t_fields[4];
extern const pb_field_t bitcoin_transaction_update_input_req_parameter_t_fields[6];
extern const pb_field_t bitcoin_transaction_update_prevtx_req_parameter_t_fields[4];
extern const pb_field_t bitcoin_transaction_update_output_req_parameter_t_fields[4];
extern const pb_field_t bitcoin_transaction_update_end_res_parameter_t_fields[3];
extern const pb_field_t bitcoin_transaction_retrieve_res_parameter_t_fields[3];

/* Maximum encoded size of messages (where known) */
#define bitcoin_transaction_begin_req_parameter_t_size 14
#define bitcoin_transaction_update_input_req_parameter_t_size 59
#define bitcoin_transaction_update_prevtx_req_parameter_t_size 143
#define bitcoin_transaction_update_output_req_parameter_t_size 172
#define bitcoin_transaction_update_end_res_parameter_t_size 12
#define bitcoin_transaction_retrieve_res_parameter_t_size 137

/* Message IDs (where set with "msgid" option) */
#ifdef PB_MSGID

#define PROTO_BITCOIN_MESSAGES \


#endif

#ifdef __cplusplus
} /* extern "C" */
#endif
/* @@protoc_insertion_point(eof) */

#endif
