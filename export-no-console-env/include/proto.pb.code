/* Automatically generated nanopb constant definitions */
/* Generated by nanopb-0.3.9 at Mon Nov  5 20:32:21 2018. */

#include "proto.pb.h"

/* @@protoc_insertion_point(includes) */
#if PB_PROTO_HEADER_VERSION != 30
#error Regenerate this file with the current version of nanopb generator.
#endif



const pb_field_t bwallet_command_t_fields[2] = {
    PB_FIELD(  1, UINT32  , REQUIRED, STATIC  , FIRST, bwallet_command_t, value, value, 0),
    PB_LAST_FIELD
};

const pb_field_t bwallet_req_header_t_fields[3] = {
    PB_FIELD(  1, UINT32  , REQUIRED, STATIC  , FIRST, bwallet_req_header_t, version, version, 0),
    PB_FIELD(  2, UENUM   , REQUIRED, STATIC  , OTHER, bwallet_req_header_t, request_to, version, 0),
    PB_LAST_FIELD
};

const pb_field_t bwallet_req_body_t_fields[3] = {
    PB_FIELD(  1, MESSAGE , REQUIRED, STATIC  , FIRST, bwallet_req_body_t, command, command, &bwallet_command_t_fields),
    PB_FIELD(  2, BYTES   , OPTIONAL, STATIC  , OTHER, bwallet_req_body_t, parameter, command, 0),
    PB_LAST_FIELD
};

const pb_field_t bwallet_request_fields[3] = {
    PB_FIELD(  1, MESSAGE , REQUIRED, STATIC  , FIRST, bwallet_request, header, header, &bwallet_req_header_t_fields),
    PB_FIELD(  2, MESSAGE , REQUIRED, STATIC  , OTHER, bwallet_request, body, header, &bwallet_req_body_t_fields),
    PB_LAST_FIELD
};

const pb_field_t bwallet_error_t_fields[3] = {
    PB_FIELD(  1, UENUM   , REQUIRED, STATIC  , FIRST, bwallet_error_t, code, code, 0),
    PB_FIELD(  2, STRING  , REQUIRED, STATIC  , OTHER, bwallet_error_t, message, code, 0),
    PB_LAST_FIELD
};

const pb_field_t bwallet_res_header_t_fields[4] = {
    PB_FIELD(  1, UINT32  , REQUIRED, STATIC  , FIRST, bwallet_res_header_t, version, version, 0),
    PB_FIELD(  2, UENUM   , REQUIRED, STATIC  , OTHER, bwallet_res_header_t, response_from, version, 0),
    PB_FIELD(  3, BOOL    , REQUIRED, STATIC  , OTHER, bwallet_res_header_t, is_error, response_from, 0),
    PB_LAST_FIELD
};

const pb_field_t bwallet_res_body_t_fields[5] = {
    PB_FIELD(  1, MESSAGE , REQUIRED, STATIC  , FIRST, bwallet_res_body_t, command, command, &bwallet_command_t_fields),
    PB_FIELD(  2, BYTES   , OPTIONAL, STATIC  , OTHER, bwallet_res_body_t, parameter, command, 0),
    PB_FIELD(  3, MESSAGE , OPTIONAL, STATIC  , OTHER, bwallet_res_body_t, error, parameter, &bwallet_error_t_fields),
    PB_FIELD(  4, BOOL    , REQUIRED, STATIC  , OTHER, bwallet_res_body_t, has_more, error, 0),
    PB_LAST_FIELD
};

const pb_field_t bwallet_response_fields[3] = {
    PB_FIELD(  1, MESSAGE , REQUIRED, STATIC  , FIRST, bwallet_response, header, header, &bwallet_res_header_t_fields),
    PB_FIELD(  2, MESSAGE , REQUIRED, STATIC  , OTHER, bwallet_response, body, header, &bwallet_res_body_t_fields),
    PB_LAST_FIELD
};











/* Check that field information fits in pb_field_t */
#if !defined(PB_FIELD_32BIT)
/* If you get an error here, it means that you need to define PB_FIELD_32BIT
 * compile-time option. You can do that in pb.h or on compiler command line.
 * 
 * The reason you need to do this is that some of your messages contain tag
 * numbers or field sizes that are larger than what can fit in 8 or 16 bit
 * field descriptors.
 */
PB_STATIC_ASSERT((pb_membersize(bwallet_req_body_t, command) < 65536 && pb_membersize(bwallet_req_body_t, parameter) < 65536 && pb_membersize(bwallet_request, header) < 65536 && pb_membersize(bwallet_request, body) < 65536 && pb_membersize(bwallet_res_body_t, command) < 65536 && pb_membersize(bwallet_res_body_t, parameter) < 65536 && pb_membersize(bwallet_res_body_t, error) < 65536 && pb_membersize(bwallet_response, header) < 65536 && pb_membersize(bwallet_response, body) < 65536), YOU_MUST_DEFINE_PB_FIELD_32BIT_FOR_MESSAGES_bwallet_command_t_bwallet_req_header_t_bwallet_req_body_t_bwallet_request_bwallet_error_t_bwallet_res_header_t_bwallet_res_body_t_bwallet_response)
#endif

#if !defined(PB_FIELD_16BIT) && !defined(PB_FIELD_32BIT)
#error Field descriptor for bwallet_res_body_t.parameter is too large. Define PB_FIELD_16BIT to fix this.
#endif


/* @@protoc_insertion_point(eof) */
