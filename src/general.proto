/* ############################################################ */
/* //////////////////////////////////////////////////////////// */
/* */
/* //////////////////////////////////////////////////////////// */
/* ############################################################ */

syntax = "proto2";

package bwallet;
import "nanopb.proto";

/* ############################################################ */
/* //////////////////////////////////////////////////////////// */
/* */
/* //////////////////////////////////////////////////////////// */
/* ############################################################ */

enum cointype_t {
	device = 0x0000;
	coin = 0x0001;
	bitcoin = 0x1000;
	bitcoin_testnet = 0x1001;
	ethereum = 0x2000;
}

message command_t {
	enum device_t {
		get_info = 0xA0;
		set_label = 0xA2;
	}
	enum coin_t {
		sync_account_info = 0xB0;
		get_account_info = 0xB1;
		extract_pubkey = 0xB2;
	}
	enum bitcoin_t {
		transaction_begin = 0xA0;
		transaction_update_script = 0xA1;
		transaction_update_prevtx = 0xA2;
		transaction_finish = 0xA3;
		transaction_retrieve = 0xA4;
		get_address = 0xB0;
	}
	required uint32 value = 1;
}

/* ############################################################ */
/* //////////////////////////////////////////////////////////// */
/* */
/* //////////////////////////////////////////////////////////// */
/* ############################################################ */

message req_header_t {
	required uint32 version = 1;
	required cointype_t request_to = 2;
}

message req_body_t {
	required command_t command = 1;
	optional bytes parameter = 2 [(nanopb).max_size = 8080];
}

message request {
	required req_header_t header = 1;
	required req_body_t body = 2;
}

/* ############################################################ */
/* //////////////////////////////////////////////////////////// */
/* */
/* //////////////////////////////////////////////////////////// */
/* ############################################################ */

enum error_code_t {
	none = 0x0000;
	invalid_access = 0x0001;
	internal_process = 0x0002;
	memory_access = 0x0003;
	invalid_format = 0x0004;
	not_support = 0x0005;
	invalid_command = 0x0006;
	wrong_length = 0x0007;
	wrong_number = 0x0008;
	lowlevel_protocol = 0xFFFC;
	user_cancel = 0xFFFD;
	device_busy = 0xFFFE;
	unknown = 0xFFFF;
}

message error_t {
	required error_code_t code = 1;
	required string message = 2 [(nanopb).max_size = 21];
}

message res_header_t {
	required uint32 version = 1;
	required cointype_t response_from = 2;
	required bool is_error = 3;
}

message res_body_t {
	required command_t command = 1;
	optional bytes parameter = 2 [(nanopb).max_size = 8080];
	optional error_t error = 3;
	required bool has_more = 4;
}

message response {
	required res_header_t header = 1;
	required res_body_t body = 2;
}

/* ############################################################ */
/* //////////////////////////////////////////////////////////// */
/* */
/* //////////////////////////////////////////////////////////// */
/* ############################################################ */

